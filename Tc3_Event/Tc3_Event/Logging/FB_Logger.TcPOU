<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Logger" Id="{65f70f38-14b4-40c0-9ff9-f567428dadcd}" SpecialFunc="None">
    <Declaration><![CDATA[// Provide logging 
FUNCTION_BLOCK FB_Logger IMPLEMENTS I_Logger
VAR_INPUT
	eLogLevel:				E_LogLevel:= E_LogLevel.Verbose;
END_VAR
VAR_OUTPUT
    bInfo:					BOOL;
    bWarning:				BOOL;
    bError:					BOOL;
    bCritical:				BOOL;
END_VAR
VAR
	aMessages:				ARRAY[0..99] OF ST_Message; // Message store
    nMessages:				UINT := 0;                     // Message count
	{attribute 'hide'} 
	nIndex: 				UINT;
	iLogging:				I_Logger;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[nIndex := 0;
WHILE nIndex < nMessages DO
	IF aMessages[nIndex].bActive THEN
		aMessages[nIndex].bActive:= FALSE;
		nIndex := nIndex + 1;
	ELSE
		IF iLogging <> 0 THEN
			// publish outdated messages to remove
			iLogging.M_Log(aMessages[nIndex]);
		END_IF
        MEMMOVE(ADR(aMessages[nIndex]), ADR(aMessages[nIndex + 1]), SIZEOF(ST_Message) * (nMessages - nIndex));
        nMessages := nMessages - 1;
		bInfo:=	FALSE;
		bWarning:=	FALSE;
		bError:= FALSE;
		bCritical:= FALSE;
    END_IF
END_WHILE]]></ST>
    </Implementation>
    <Method Name="M_Attach" Id="{5132dc24-cefc-4685-9f79-c0a1a72e2231}">
      <Declaration><![CDATA[METHOD PUBLIC M_Attach : BOOL
VAR_INPUT
	iLogging:				I_Logger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.iLogging = 0 THEN
	THIS^.iLogging:= iLogging;
	M_Attach:= TRUE;
ELSIF THIS^.iLogging = iLogging THEN
	// already inside
	M_Attach:= TRUE;
	RETURN;
ELSE
	// redirect to next logging function block
	THIS^.iLogging.M_Attach(iLogging);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Log" Id="{c925afc5-8e57-47da-84bb-210c829a3dd4}">
      <Declaration><![CDATA[METHOD PUBLIC M_Log : BOOL
VAR_INPUT
	stMessage:			ST_Message;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eLogLevel > stMessage.eLogLevel THEN
	M_Log:= TRUE;
	RETURN;
END_IF

CASE stMessage.eLogLevel OF
	E_LogLevel.Info:
    	bInfo:= TRUE;
		
	E_LogLevel.Warning:		
    	bWarning:= TRUE;
		
	E_LogLevel.Error:
    	bError:= TRUE;
		
	E_LogLevel.Critical:
    	bCritical:= TRUE;
		
	ELSE
		;
END_CASE


// Find
FOR nIndex := 0 TO nMessages DO
    IF aMessages[nIndex].sMessage = stMessage.sMessage AND_THEN aMessages[nIndex].sSource = stMessage.sSource THEN
        aMessages[nIndex].bActive:= TRUE;
		M_Log := TRUE;
        RETURN;
    END_IF
END_FOR

// else Add
IF nMessages < 99 THEN
	nIndex := nMessages;
	stMessage.bActive:= TRUE;
    aMessages[nMessages]:= stMessage;;
    nMessages := nMessages + 1;
	// reduce internal buffers 
	// publish new messages to log
	IF iLogging <> 0 THEN
		iLogging.M_Log(stMessage);
	END_IF
	M_Log := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_LogLevel" Id="{1c739022-3d6f-4ecb-abf9-2f9944cdc386}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_LogLevel : E_LogLevel]]></Declaration>
      <Get Name="Get" Id="{92f636fd-e8a2-488e-a20a-d9bd7d8e0a21}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_LogLevel:= eLogLevel;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{98e4e2b1-517c-43c2-870d-a5a57ae02ec1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eLogLevel:= P_LogLevel;
]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>