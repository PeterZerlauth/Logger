<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Logger" Id="{24e84e8b-19c0-4381-a1e9-ba01ff2711b8}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'} 
FUNCTION_BLOCK FB_Logger
VAR_INPUT
	iLogging:			I_Logging;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	{attribute 'hide'} 
    {attribute 'instance-path'} 
    {attribute 'noinit'} 
    sInstancePath:				STRING(255); 
	sArguments:					STRING(255); 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{334f028f-5e57-4c30-9ad1-974a7aa5caf6}">
      <Declaration><![CDATA[//FB_Init ist immer implizit verfügbar und wird primär für die Initialisierung verwendet.
//Der Rückgabewert wird nicht ausgewertet. Für gezielte Einflussnahme können Sie
//die Methoden explizit deklarieren und darin mit dem Standard-Initialisierungscode 
//zusätzlichen Code bereitstellen. Sie können den Rückgabewert auswerten.
METHOD FB_Init: BOOL
VAR_INPUT    
bInitRetains: BOOL; // TRUE: Die Retain-Variablen werden initialisiert (Reset warm / Reset kalt)    
bInCopyCode: BOOL;  // TRUE: Die Instanz wird danach in den Kopiercode kopiert (Online-Change)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sInstancePath:= F_InstancePath(sInstancePath);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddBOOL" Id="{5a67c7b3-acb8-4118-8aa1-19ff601601ea}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddBOOL
VAR_INPUT
	nValue:				LINT;
END_VAR
VAR
	sValue: 			STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= LINT_TO_STRING(nValue);			// convert
sValue:= CONCAT(sValue, '$R');				// add separator
sArguments:= CONCAT(sArguments, sValue);	// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddINT" Id="{706983d2-23f8-44c2-88ef-14192d2f58aa}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddINT
VAR_INPUT
	nValue:				LINT;
END_VAR
VAR
	sValue: 			STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= LINT_TO_STRING(nValue);			// convert
sValue:= CONCAT(sValue, '$R');				// add separator
sArguments:= CONCAT(sArguments, sValue);	// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddREAL" Id="{c30915ad-192c-43b6-9f87-5fe35fbfe2fa}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddREAL
VAR_INPUT
	fValue:				LREAL;
	nDecimals:			USINT;
END_VAR
VAR
	sValue: 			STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= LREAL_TO_FMTSTR(fValue, nDecimals, TRUE);		// convert
sValue:= CONCAT(sValue, '$R');							// add separator
sArguments:= CONCAT(sArguments, sValue);				// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddSTRING" Id="{1ab4f6c4-048c-4e14-80b1-f9f14f5bf3a4}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddSTRING
VAR_INPUT
	sValue:				STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= CONCAT(sValue, '$R');				// add separator
sArguments:= CONCAT(sArguments, sValue);	// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddTIME" Id="{9cde1437-e5dc-4706-aa5a-a5acc59be7c8}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddTIME
VAR_INPUT
	tValue:				TIME;
END_VAR
VAR
	sValue: 			STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= TIME_TO_STRING(tValue);			// convert
sValue:= CONCAT(sValue, '$R');				// add separator
sArguments:= CONCAT(sArguments, sValue);	// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Critical" Id="{accc1bfb-8e8e-4805-9e0b-d8677c60b196}">
      <Declaration><![CDATA[METHOD PUBLIC M_Critical : BOOL
VAR_INPUT
	nID:				UDINT;
	sMessage:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

iLogging.M_Log(E_LogLevel.Critical, nID, sInstancePath, sMessage, sArguments);
sArguments:= '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Error" Id="{ff42a88a-8912-4d2c-af88-2d59a6d8da27}">
      <Declaration><![CDATA[METHOD PUBLIC M_Error : BOOL
VAR_INPUT
	nID:				UDINT;
	sMessage:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

iLogging.M_Log(E_LogLevel.Error, nID, sInstancePath, sMessage, sArguments);
sArguments:= '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Info" Id="{2ea5a01b-eb1e-4166-8c91-90bf5bd9cfc5}">
      <Declaration><![CDATA[METHOD PUBLIC M_Info : BOOL
VAR_INPUT
	nID:				UDINT;
	sMessage:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

iLogging.M_Log(E_LogLevel.Info, nID, sInstancePath, sMessage, sArguments);
sArguments:= '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Verbose" Id="{de67a697-7e72-4e4b-b32b-4b561494e424}">
      <Declaration><![CDATA[METHOD PUBLIC M_Verbose : BOOL
VAR_INPUT
	sMessage:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

iLogging.M_Log(E_LogLevel.Verbose, 0, sInstancePath, sMessage, sArguments);
sArguments:= '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Warning" Id="{a6eef191-b99b-4a50-95aa-3b8f792c1e41}">
      <Declaration><![CDATA[METHOD PUBLIC M_Warning : BOOL
VAR_INPUT
	nID:				UDINT;
	sMessage:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

iLogging.M_Log(E_LogLevel.Warning, nID, sInstancePath, sMessage, sArguments);
sArguments:= '';]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Logger" Id="{134e0ae4-88be-4cc8-992b-473aa00879c7}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Logger : I_Logging]]></Declaration>
      <Get Name="Get" Id="{b32f6a48-3497-4aba-b41b-4cc92ef6b6d2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Logger:= iLogging;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9409cdd8-94a3-49af-847c-401ba81bb0f1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iLogging:= P_Logger;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>