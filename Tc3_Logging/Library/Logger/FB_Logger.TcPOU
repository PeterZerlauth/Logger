<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Logger" Id="{fcfa56ff-d0f1-4149-9de7-6f44354915c6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'} 
FUNCTION_BLOCK FB_Logger
VAR_INPUT
	iLogging:			I_Logging;
END_VAR
VAR_OUTPUT
END_VAR
VAR
    {attribute 'instance-path'} 
    {attribute 'noinit'} 
    sInstancePath:				STRING(255); 
	sArguments:					STRING(255); 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{256fe292-0b03-4593-83b5-0da540634dee}">
      <Declaration><![CDATA[//FB_Init ist immer implizit verfügbar und wird primär für die Initialisierung verwendet.
//Der Rückgabewert wird nicht ausgewertet. Für gezielte Einflussnahme können Sie
//die Methoden explizit deklarieren und darin mit dem Standard-Initialisierungscode 
//zusätzlichen Code bereitstellen. Sie können den Rückgabewert auswerten.
METHOD FB_Init: BOOL
VAR_INPUT    
bInitRetains: BOOL; // TRUE: Die Retain-Variablen werden initialisiert (Reset warm / Reset kalt)    
bInCopyCode: BOOL;  // TRUE: Die Instanz wird danach in den Kopiercode kopiert (Online-Change)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sInstancePath:= F_InstancePath(sInstancePath);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddBOOL" Id="{6fe5c2f5-9f6f-45ef-a512-7b981b0be320}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddBOOL
VAR_INPUT
	nValue:				LINT;
END_VAR
VAR
	sValue: 			STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= LINT_TO_STRING(nValue);			// convert
sValue:= CONCAT(sValue, '$R');				// add separator
sArguments:= CONCAT(sArguments, sValue);	// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddINT" Id="{0fb61d34-2130-4e2b-8ca3-a66334bd442e}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddINT
VAR_INPUT
	nValue:				LINT;
END_VAR
VAR
	sValue: 			STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= LINT_TO_STRING(nValue);			// convert
sValue:= CONCAT(sValue, '$R');				// add separator
sArguments:= CONCAT(sArguments, sValue);	// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddREAL" Id="{ec2078de-d198-403e-9f1d-9aa3713c42cf}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddREAL
VAR_INPUT
	fValue:				LREAL;
	nDecimals:			USINT;
END_VAR
VAR
	sValue: 			STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= LREAL_TO_FMTSTR(fValue, nDecimals, TRUE);		// convert
sValue:= CONCAT(sValue, '$R');							// add separator
sArguments:= CONCAT(sArguments, sValue);				// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddSTRING" Id="{6ddea08b-8528-414a-b8b0-ca7a04ccfa78}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddSTRING
VAR_INPUT
	sValue:				STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= CONCAT(sValue, '$R');				// add separator
sArguments:= CONCAT(sArguments, sValue);	// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddTIME" Id="{5bf7bbc0-6a06-4191-858d-e9e3e764bb18}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddTIME
VAR_INPUT
	tValue:				TIME;
END_VAR
VAR
	sValue: 			STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sValue:= TIME_TO_STRING(tValue);			// convert
sValue:= CONCAT(sValue, '$R');				// add separator
sArguments:= CONCAT(sArguments, sValue);	// add new arg]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Critical" Id="{7b4c91bf-8e3c-413c-a148-e271617106d9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Critical : BOOL
VAR_INPUT
	nID:				UDINT;
	sMessage:			STRING(255);
END_VAR
VAR
	stMessage:			ST_Message;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

stMessage.eLogLevel:= E_LogLevel.Critical;
stMessage.nID:= nID;
stMessage.nTimestamp:= F_GetSystemTime();
stMessage.sMessage:= sMessage;
stMessage.sArguments:= sArguments;
stMessage.sDefault:= F_Format(sMessage, sArguments);
stMessage.sSource:= sInstancePath;
sArguments:= '';

iLogging.M_Log(stMessage);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Error" Id="{11687e23-ea95-4e4f-aed4-4799ffa1ad84}">
      <Declaration><![CDATA[METHOD PUBLIC M_Error : BOOL
VAR_INPUT
	nID:				UDINT;
	sMessage:			STRING(255);
END_VAR
VAR
	stMessage:			ST_Message;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

stMessage.eLogLevel:= E_LogLevel.Error;
stMessage.nID:= nID;
stMessage.nTimestamp:= F_GetSystemTime();
stMessage.sMessage:= sMessage;
stMessage.sArguments:= sArguments;
stMessage.sDefault:= F_Format(sMessage, sArguments);
stMessage.sSource:= sInstancePath;
sArguments:= '';

iLogging.M_Log(stMessage);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Info" Id="{7a920e55-da6d-473b-9aba-119c4de007e0}">
      <Declaration><![CDATA[METHOD PUBLIC M_Info : BOOL
VAR_INPUT
	nID:				UDINT;
	sMessage:			STRING(255);
END_VAR
VAR
	stMessage:			ST_Message;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

stMessage.eLogLevel:= E_LogLevel.Info;
stMessage.nID:= nID;
stMessage.nTimestamp:= F_GetSystemTime();
stMessage.sMessage:= sMessage;
stMessage.sArguments:= sArguments;
stMessage.sDefault:= F_Format(sMessage, sArguments);
stMessage.sSource:= sInstancePath;
sArguments:= '';

iLogging.M_Log(stMessage);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Verbose" Id="{db95e385-16ed-493b-a6a5-28cc6625776b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Verbose : BOOL
VAR_INPUT
	sMessage:			STRING(255);
END_VAR
VAR
	stMessage:			ST_Message;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

stMessage.eLogLevel:= E_LogLevel.Verbose;
stMessage.nID:= 0;
stMessage.nTimestamp:= F_GetSystemTime();
stMessage.sMessage:= sMessage;
stMessage.sArguments:= sArguments;
stMessage.sDefault:= F_Format(sMessage, sArguments);
stMessage.sSource:= sInstancePath;
sArguments:= '';

iLogging.M_Log(stMessage);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Warning" Id="{1aa0d3ef-0f74-4102-97d7-7d587822db85}">
      <Declaration><![CDATA[METHOD PUBLIC M_Warning : BOOL
VAR_INPUT
	nID:				UDINT;
	sMessage:			STRING(255);
END_VAR
VAR
	stMessage:			ST_Message;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLogging = 0 THEN
	RETURN;
END_IF

stMessage.eLogLevel:= E_LogLevel.Warning;
stMessage.nID:= nID;
stMessage.nTimestamp:= F_GetSystemTime();
stMessage.sMessage:= sMessage;
stMessage.sArguments:= sArguments;
stMessage.sDefault:= F_Format(sMessage, sArguments);
stMessage.sSource:= sInstancePath;
sArguments:= '';

iLogging.M_Log(stMessage);]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Logger" Id="{98c079df-4944-4aae-a3d6-ca12ac41d1d4}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Logger : I_Logging]]></Declaration>
      <Get Name="Get" Id="{7f49254e-94b6-4972-a1b5-02a92d10e780}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Logger:= iLogging;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4bbb606c-4053-49cc-ae04-84e1809ace25}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iLogging:= P_Logger;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>